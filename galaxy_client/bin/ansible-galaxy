#!/usr/bin/env python

# (c) 2012, Michael DeHaan <michael.dehaan@gmail.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

########################################################
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

__requires__ = ['ansible']
try:
    import pkg_resources
except Exception:
    # Use pkg_resources to find the correct versions of libraries and set
    # sys.path appropriately when there are multiversion installs.  But we
    # have code that better expresses the errors in the places where the code
    # is actually used (the deps are optional for many code paths) so we don't
    # want to fail here.
    pass

import os
import shutil
import sys
import traceback

from galaxy_client.config import defaults
from galaxy_client import exceptions
from galaxy_client.utils.text import to_text


# Used for determining if the system is running a new enough python version
# and should only restrict on our documented minimum versions
_PY3_MIN = sys.version_info[:2] >= (3, 5)
_PY2_MIN = (2, 6) <= sys.version_info[:2] < (3,)
_PY_MIN = _PY3_MIN or _PY2_MIN
if not _PY_MIN:
    raise SystemExit('ERROR: Ansible requires a minimum of Python2 version 2.6 or Python3 version 3.5. Current version: %s' % ''.join(sys.version.splitlines()))


class LastResort(object):
    # OUTPUT OF LAST RESORT
    def display(self, msg, log_only=None):
        print(msg, file=sys.stderr)

    def error(self, msg, wrap_text=None):
        print(msg, file=sys.stderr)


if __name__ == '__main__':

    display = LastResort()

    try:  # bad ANSIBLE_CONFIG or config options can force ugly stacktrace
        # from ansible.utils.display import Display
        from galaxy_client.utils.display import Display
    except exceptions.CliOptionsError as e:
        display.error(to_text(e), wrap_text=False)
        sys.exit(5)

    # FIXME: remove/logging
    display = Display()

    cli = None

    # FIXME: top level import, if not entry point
    from galaxy_client.cli.galaxy import GalaxyCLI

    try:
        args = [to_text(a, errors='surrogate_or_strict') for a in sys.argv]
    except UnicodeError:
        display.error('Command line args are not in utf-8, unable to continue.  Ansible currently only understands utf-8')
        display.display(u"The full traceback was:\n\n%s" % to_text(traceback.format_exc()))
        exit_code = 6

    cli = GalaxyCLI(args)

    exit_code = 1
    try:
        cli.parse
    except exceptions.CliOptionsError as e:
        cli.parser.print_help()
        # FIXME: logging?
        display.error(to_text(e), wrap_text=False)
        exit_code = 5
        raise
        sys.exit(exit_code)
    finally:
        # Remove ansible tmpdir
        shutil.rmtree(defaults.DEFAULT_LOCAL_TMP, True)

    try:
        exit_code = cli.run()
    except exceptions.ParserError as e:
        display.error(to_text(e), wrap_text=False)
        exit_code = 4
        raise
# TQM takes care of these, but leaving comment to reserve the exit codes
#    except AnsibleHostUnreachable as e:
#        display.error(str(e))
#        exit_code = 3
#    except AnsibleHostFailed as e:
#        display.error(str(e))
#        exit_code = 2
    except exceptions.GalaxyClientError as e:
        display.error(to_text(e), wrap_text=False)
        exit_code = 1
        raise
    except KeyboardInterrupt:
        display.error("User interrupted execution")
        exit_code = 99
        raise
    # FIXME: replace with except_handler
    except Exception as e:
        # if C.DEFAULT_DEBUG:
        #    # Show raw stacktraces in debug mode, It also allow pdb to
        #    # enter post mortem mode.
        #    raise
        have_cli_options = cli is not None and cli.options is not None
        display.error("Unexpected Exception, this is probably a bug: %s" % to_text(e), wrap_text=False)
        if not have_cli_options or have_cli_options and cli.options.verbosity > 2:
            log_only = False
            if hasattr(e, 'orig_exc'):
                display.vvv('\nexception type: %s' % to_text(type(e.orig_exc)))
                why = to_text(e.orig_exc)
                if to_text(e) != why:
                    display.vvv('\noriginal msg: %s' % why)
        else:
            display.display("to see the full traceback, use -vvv")
            log_only = True
        display.display(u"the full traceback was:\n\n%s" % to_text(traceback.format_exc()), log_only=log_only)
        exit_code = 250
        raise
    finally:
        # Remove ansible tmpdir
        shutil.rmtree(defaults.DEFAULT_LOCAL_TMP, True)

    sys.exit(exit_code)
